# find git branch into folders
parse_git_branch() {
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# restart postgres
pgr() {
  kill `ps -ef | grep postgres | grep -v grep | awk '{print $2}'`
}

#execute python's PIP without a virtualenv
syspip(){
   PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

pihole_disable() {
	ssh pi@addams.local 'pihole disable 1m'
}

pre_commit() {
	mix format; mix credo; mix dialyzer --format github;
}

#########################################
# BASH UTILITIES FOR DOCKER
# Author: Nicolas Baptista <nicolas@onyo.com>
# Source this file in your .bash_profile
#########################################

alias d='docker'
alias dl='docker ps -l -q'
alias dc='docker-compose'

#Stops and remove all containers
docker_cleanup(){
	printf "Stoping all docker containers\n"
	docker stop $(docker ps -a -q);
	printf "Removing all docker containers\n"
	docker rm $(docker ps -a -q);
}

#Open the bash on a specific container
docker_enter_container(){
	local LAST=false
	local ERROR=false
	readonly container=${1:?"Container id must be specified or use -L option to enter latest running container"}

	case "$1" in
	-l|-L)
		local LAST=true
		;;
	\?)
		local ERROR=true
		;;
	esac

	if [[ "$ERROR" == true ]]
		then
		printf "Incorrect option\n"
	elif [[ "$LAST" == true ]]
		then
		docker exec -it $(dl) /bin/bash || docker exec -it $(dl) /bin/sh
	elif [ $1 ]
		then
		printf "Entering $1 container\n"
		docker exec -it $1 /bin/bash || docker exec -it $1 /bin/sh
	fi
}

docker_logs(){
	docker-compose logs -f;
}
