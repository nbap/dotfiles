export ONYO_ROOT_LOCATION=~/workspace/onyo
# find git branch into folders
parse_git_branch() {
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

# restart postgres
pgr() {
  kill `ps -ef | grep postgres | grep -v grep | awk '{print $2}'`
}

#execute python's PIP without a virtualenv
syspip(){
   PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

workon_backend(){
	source $ONYO_ROOT_LOCATION/env_backend/bin/activate;
	cd $ONYO_ROOT_LOCATION/onyo-backend;
}

workon_microservice(){
	source $ONYO_ROOT_LOCATION/microservices/env_pos_service/bin/activate;
	cd $ONYO_ROOT_LOCATION//microservices/onyo-pos-service;
}

workon_deploy(){
	source $ONYO_ROOT_LOCATION/env_deploy/bin/activate;
	cd $ONYO_ROOT_LOCATION/onyo-deploy;
}

use_docker() {
	DMSTATUS=`docker-machine status default`;
	if [ $DMSTATUS != 'Running' ]
		then
			docker-machine start default;
	fi
	eval "$(docker-machine env default </dev/null)";
}

run_onyo() {
	use_docker;
	printf "Stoping all docker containers\n"
	docker stop $(docker ps -a -q);
	printf "Removing all docker containers\n"
	docker rm $(docker ps -a -q);

	cd $ONYO_ROOT_LOCATION/onyo-backend/deploy/dev-docker;
	printf docker-machine ip default;
	docker-compose up -d;
	docker-compose logs; while [ $? -ne 0 ]; do docker-compose logs; done;
}
